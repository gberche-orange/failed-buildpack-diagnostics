#!/usr/bin/env bash

#set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat $1/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir"
    else
      echo "=====> cloning repo with git clone $url $dir"
      git clone $url $dir
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch
    fi

    echo "=====> checking permissions and potentially fixing them"
    ls -al $dir/bin/{detect,compile,release}

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    echo "=====> executing $dir/bin/detect $1"
    echo "       $dir/bin/detect content is:"
    cat $dir/bin/detect
    echo

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        echo "=====> executing $dir/bin/release $1"
        echo "       $dir/bin/release content is:"
        cat $dir/bin/release
        $dir/bin/release $1 > $1/last_pack_release.out
        echo "=====> release command result (expecting YAML hash) is:"
        cat $1/last_pack_release.out
      fi
    else
      echo "=====> exit status was: $? detect failed, compile skipped (buildpack would fail unless targetted explicit"
      echo "       (buildpack would fail unless targetted explicitly with cf -b [...]"
      echo "       which would skip detect invocation"
      unset framework
    fi
  fi
done

if [ "$framework" == "" ]; then
  echo "=====> no sub buildpack successfully compiled, exiting with error"
  sleep 15
  exit 1
else
  echo "=====> final detected framework is: $framework"
fi

if [ -e $1/last_pack_release.out ]; then
  echo "=====> Using release configuration from last framework ($framework)."
fi
